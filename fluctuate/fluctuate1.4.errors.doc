ERROR HANDLING IN FLUCTUATE

Three cases in which these programs should NOT be used:

1)  Data sets with no polymorphism.  In theory the estimate of Theta
should be zero; in practice the program will not work correctly.
The program will halt if it encounters such data, giving a message:
"Warning: There are no variable sites in this data set."

It would be desirable to include such invariant loci in multi-locus
estimates, but it's not currently possible.

2)  Data sets of only two species.  The genealogy-rearrangement model
used does not work with less than three species and the program will
crash.

3)  Multiple loci with different effective population sizes.  Running
FLUCTUATE or COALESCE with a mixture of mitochondrial loci (effective 
population size of the number of females) and nuclear loci (effective 
population size twice the number of individuals), for example, will 
produce meaningless results.

The following list gives some possible error messages and other
problems, and our best guess as to how to fix them.  It is necessarily
incomplete.  If you encounter novel problems, we would like to hear
about them:  the authors can be reached by email at

mkkuhner@gs.washington.edu

or by postal mail at

Mary Kuhner
University of Washington
Department of Genome Sciences
Box 357730
Seattle, WA 98195-7730, USA


----ERROR MESSAGES----

"Error allocating memory"
"XXX failed due to lack of space!"
"tree setup fails, allocate more space"
mysterious mid-run crashes

     These programs use dynamic memory allocation to minimize use of computer 
memory.  In practice this means that they may run out of memory midway 
through a long run as they slowly increase in size.  The program 
will generally terminate with the message "Error allocating memory";
however, on some systems (like our DEC 5000) it will crash instead. 
     If this happens, you may wish to separate the short and long chains 
into two separate runs.  Use the short chains to get good estimates of
Theta and g which can be provided to the long chain.  You may also wish to
lengthen the sampling interval, which reduces the amount of memory
needed for a given number of steps (at the price of basing the final
estimate on a sparser sample of genealogies).
     You may be able to set operating system or compile-time flags to
increase the amount of memory available.
     If you still run out of memory, check for other programs which may be
competing with COALESCE or FLUCTUATE.  Because of the dynamic allocation, this
version does not have internal constants which can be reduced:  its size
for a data set of given length and a given number of iterations is
basically fixed.  If the program will not run even without competition,
there may be no alternative to removing some sites or sequences from the 
data set (or finding another machine).  Sites or sequences to be removed 
should be chosen randomly.  Do not preferentially remove invariant sites:  
they are just as important in estimating branch lengths as "informative" 
sites.  It may be best to make several runs, removing a different set of
sites or sequences each time.

"Inappropiate entry in parmfile: XXX"

     An option in the parmfile is improperly formed or makes no sense (such
as specifying that base frequencies should be taken from the data, and
then supplying base frequencies).  Check the format of the parmfile, or 
use the menu instead.  (Note that the program will always attempt to
use the parmfile to provide defaults; remove or rename it if you don't
wish to use it at all.)  FLUCTUATE can use the parmfile from COALESCE
(and will run in COALESCE mode) but COALESCE will crash if asked to use
FLUCTUATE's parmfile.

"Parameter file (parmfile) missing"

     If the "menu" constant is set to false when the program is compiled, 
the parmfile must be present (and must be named "parmfile") for the program
to work.

"Encountered tree incompatible with data"

     The input tree must be a legal tree for the sequence data.  The only way
a properly-formatted tree can be illegal is if it connects two sequences
via a zero-length branch (implying no evolution) and those sequences are
not identical.  A UPGMA tree of the sequences should never do this, and
the initial trees generated by the program itself are also safe (though very 
bad). 
     In the course of searching tree space the program should never generate
a tree incompatible with the data.  If this error is displayed mid-run
you have probably found a new bug:  please let us know.

"Encountered machine precision limits"

     LAMARC does a lot of real arithmetic with double-length floating point
numbers.  With small computers or huge data sets this may not provide
enough precision to avoid key values becoming zero due to truncation.
Possible solutions are to use a smaller data set or a computer with more
digits of precision in its floating point numbers.

"Warning:  no proposed trees ever accepted"

     This problem can also be detected using the P (Progress) option from the
menu.  Failure to accept changes can possibly happen if the initial tree 
is very good and the data is very informative (clean data with large numbers 
of base pairs) since in this case the program has difficulty proposing a 
new tree as good as the old one.  This hypthothesis can be tested by
making a run with a poorer initial tree.  An alternative hypothesis is that 
the initial values of the parameters are so unreasonable that trees 
generated under them are preposterous; this can be tested by using different
values of Theta and g.

"Segmentation fault"

     Or other cryptic operating system errors.  In our experience these are
often caused by leaving a line out of the parameter file (if one is
being used), or by an error in the format of the input tree.  They may
also be a symptom of lack of space or of specifying an overly large 
(positive or, especially, negative) value of the growth rate g.

"Sequences out of alignment"

     The programs are picky about the format of the input sequences.  Check 
the I menu option (Interleaved vs. Sequential); make sure that all sequence
names are padded out to ten characters with blanks; make sure there are
no blanks at the end of any sequence.

"CATASTROPHIC ERROR, halt execution"
"In gettymenode, failed to find node #x"
"Impossible option XXX detected!"

     These are the kinds of errors programmers hate to think about.  We 
don't know how these conditions could possibly occur, but if they do the
results from the run are almost surely garbage and should be discarded
as something has gone catastrophically wrong with the internal logic.
Please let us know if you see this type of error.

Wild variability in the estimates of theta and/or g in FLUCTUATE

     If the data does not give strong guidance as to the correct tree, the
likelihood surface may be extremely flat in one or both parameters.
This causes the maximum of the surface to vary chaotically, which can be
observed by setting the "progress" flag and watching the short-chain
intermediate estimates.  Severe examples of this problem may cause the
program to crash as it attempts to work with a value of theta and/or g
too large for machine capabilities.
     If this happens, try increasing the length of each chain:  sampling 
a wider variety of trees before making the estimate decreases the 
chance that the estimate will be extreme.  If this does not work, you
may need to reconsider whether there is enough information in your data
to allow FLUCTUATE to function.  (COALESCE is relatively insensitive to
this problem:  its estimates on a low-information data set will be 
pretty meaningless, but they won't fluctuate uncontrollably.)
     FLUCTUATE will not perform well on data that corresponds to a
star phylogeny (all sequences equally diverged); such data correspond
to an enourmous value of g and almost no informtion on Theta.  An
appropriate alternative in such cases is the growth estimator of
Slatkin and Hudson.
