ERROR HANDLING IN RECOMBINE

Two cases in which RECOMBINE should NOT be used:

1)  Data sets with no polymorphism.  In theory the estimate of Theta
should be zero; in practice the program will not work correctly.
The program will halt if it encounters such data, giving a message:
"Warning: There are no variable sites in this data set."

It would be desirable to include such invariant loci in multi-locus
estimates, but it's not currently possible.

2)  Unlike FLUCTUATE, RECOMBINE will work on as few as two tips, though
the results will not be very good.  However, the SNP data model will not
work with two tips (the likelihood surface is completely flat, and the
estimator will never succeed).

The following list gives some possible error messages and other
problems, and our best guess as to how to fix them.  It is necessarily
incomplete.  If you encounter novel problems, we would like to hear
about them:  the authors can be reached by email at

mkkuhner@genetics.washington.edu

or by postal mail at

Mary Kuhner
University of Washington
Department of Genetics 
Box 357360
Seattle, WA 98195-7360, USA


----ERROR MESSAGES----

"Error allocating memory"
"XXX failed due to lack of space!"
"tree setup fails, allocate more space"
mysterious mid-run crashes

     These programs use dynamic memory allocation to minimize use of computer 
memory.  In practice this means that they may run out of memory midway 
through a long run as they slowly increase in size.  The program 
will generally terminate with the message "Error allocating memory";
however, on some systems (like our DEC 5000) it will crash instead. 
     If this happens, you may wish to separate the short and long chains 
into two separate runs.  Use the short chains to get good estimates of
Theta and r which can be provided to the long chain.  You may also wish to
lengthen the sampling interval, which reduces the amount of memory
needed for a given number of steps (at the price of basing the final
estimate on a sparser sample of genealogies).
     You may be able to set operating system or compile-time flags to
increase the amount of memory available.
     If you still run out of memory, check for other programs which may be
competing with RECOMBINE.  Because of the dynamic allocation, this
version does not have internal constants which can be reduced:  its size
for a data set of given length and a given number of iterations is
basically fixed.  If the program will not run even without competition,
there may be no alternative to removing some sites or sequences from the 
data set (or finding another machine).  Sites or sequences to be removed 
should be chosen randomly.  Do not preferentially remove invariant sites:  
they are just as important in estimating branch lengths as "informative" 
sites.  It may be best to make several runs, removing a different set of
sites or sequences each time.

"Inappropiate entry in parmfile: XXX"
"Warning: whichopbool failed to identify option"

     An option in the parmfile is improperly formed or makes no sense (such
as specifying that base frequencies should be taken from the data, and
then supplying base frequencies).  Check the format of the parmfile, or 
use the menu instead.  (Note that the program will always attempt to
use the parmfile to provide defaults; remove or rename it if you don't
wish to use it at all.)  RECOMBINE can use the parmfile from COALESCE
or FLUCTUATE (it will issue the above pair of warnings) but COALESCE
and FLUCTUATE will crash if asked to use RECOMBINE's parmfile.

"Parameter file (parmfile) missing"

     If the "menu" constant is set to false when the program is compiled, 
the parmfile must be present (and must be named "parmfile") for the program
to work.

"Error in sampling increment, increment set to 10"

     The program believes that it has been asked to sample a negative
number of trees.  It automatically resets to sampling every tenth tree.

"Encountered tree incompatible with data"

     The input tree must be a legal tree for the sequence data.  The only way
a properly-formatted tree can be illegal is if it connects two sequences
via a zero-length branch (implying no evolution) and those sequences are
not identical.  A UPGMA tree of the sequences should never do this, and
the initial trees generated by the program itself are also safe (though very 
bad). 
     In the course of searching tree space the program should never generate
a tree incompatible with the data.  If this error is displayed mid-run
you have probably found a new bug:  please let us know.

"Encountered machine precision limits"

     LAMARC does a lot of real arithmetic with double-length floating point
numbers.  With small computers or huge data sets this may not provide
enough precision to avoid key values becoming zero due to truncation.
Possible solutions are to use a smaller data set or a computer with more
digits of precision in its floating point numbers.

"Warning:  no proposed trees ever accepted"

     This problem can also be detected using the P (Progress) option from the
menu.  Failure to accept changes can possibly happen if the initial tree 
is very good and the data is very informative (clean data with large numbers 
of base pairs) since in this case the program has difficulty proposing a 
new tree as good as the old one.  This hypthothesis can be tested by
making a run with a poorer initial tree.  An alternative hypothesis is that 
the initial values of the parameters are so unreasonable that trees 
generated under them are preposterous; this can be tested by using different
values of Theta and g.

"Segmentation fault"

     Or other cryptic operating system errors.  In our experience these are
often caused by leaving a line out of the parameter file (if one is
being used), or by an error in the format of the input tree or data
(such as confusing sequential and interleaved data).  They may
also be a symptom of lack of space.

"ERROR: BAD BASE x AT POSITION x OF INDIVIDUAL x in POPULATION x"
"Sequences out of alignment"
"Cannot find seqences: x"

     The programs are picky about the format of the input sequences.  Check 
the I menu option (Interleaved vs. Sequential); make sure that all sequence
names are padded out to ten characters with blanks; make sure there are
no blanks at the end of any sequence; and that there are no blank lines
between sequences.

"CATASTROPHIC ERROR, halt execution"
"In gettymenode, failed to find node #x"
"Impossible option XXX detected!"
"XXXX, found an unknown datatype X"
"XXXX, can't be/get here!"
"ERROR:xxxxxxx"

     These are the kinds of errors programmers hate to think about.  We 
don't know how these conditions could possibly occur, but if they do the
results from the run are almost surely garbage and should be discarded
as something has gone catastrophically wrong with the internal logic.
Please let us know if you see this type of error.

Wild variability in the estimates of theta and/or r

     If the data does not give strong guidance as to the correct tree, the
likelihood surface may be extremely flat in one or both parameters.
This causes the maximum of the surface to vary chaotically, which can be
observed by setting the "progress" flag and watching the short-chain
intermediate estimates.  Severe examples of this problem may cause the
program to crash as it attempts to work with a value of theta and/or r
too large for machine capabilities.
     If this happens, try increasing the length of each chain:  sampling 
a wider variety of trees before making the estimate decreases the 
chance that the estimate will be extreme.  If this does not work, you
may need to reconsider whether there is enough information in your data
to allow RECOMBINE to function.

Many genealogies are dropped

     Genealogies are "dropped" when they contain too many recombinations, since
highly recombinant trees slow the program greatly and can cause it to crash
due to lack of memory.  If many trees are being dropped, however, the
estimate will be biassed downward.  You can use the final-coalescence
search strategy to reduce the number of recombinations per tree, at the cost
of making the program run about twice as slowly.  If this is not sufficient
(the program is still dropping 10% or more of trees even using the final-
coalescence strategy) your options are to increase the recombination limit
in constants.h, or to reduce the number of sequences and/or sites used.
In any case, bear in mind that estimates which come from chains where many
trees were dropped may be biassed downwards.
     The final-coalescence option should produce estimates just as good as
the normal option, or better if the normal option is dropping trees.  Its
only downside is its slowness.

"WARNING--lower bound on estimate of recombination may have affected final
result"

     RECOMBINE encounters a logical problem if it estimates rec=0 for an
intermediate chain.  If it accepts this value and starts the next chain with
rec0=0, it will never propose any trees with recombinations, and rec will
never again be greater than 0.  Zero is a "fatal attractor" which can never
be left once it has been reached.  To avoid this problem, we impose a lower
bound on rec0.  The lower bound is chosen to aim for at least one recombination
per chain, though it is only approximately successful in accomplishing this.
However, the use of this lower bound may lead to an upwards bias in the
estimate of rec.  If the lower bound is used in determining rec0 for the final
chain, this warning is printed to indicate that the final estimate may have
been biassed upwards.

"WARNING--lower bound on estimate of Theta may have affected final result"
Theta estimate with SNP data goes to zero

     We impose a lower bound on Theta because the program cannot succeed in
simulating trees of length very near zero.  In normal operation with sequence
data this limit is not generally encountered.  It would be encountered with 
data sets containing no variable sites, but the program will recognize these 
and terminate the analysis.
     If you are using SNPs taken directly from your sample, you may see the
estimate of Theta attempt to go to zero (probably crashing the program
in the process).  This occurs when all of the sites in your data set are
compatible with each other--that is, there is no evidence for a second mutation
at any site.  This will be most common with small data sets and with low values
of Theta.  In such cases, the theoretical maximum of Theta is, in fact, zero.
RECOMBINE will not perform well on such data; you may want to try the infinite
sites models of Griffiths et al. instead.
     If this message is printed, the lower bound on Theta has affected the
Theta0 value of the final chain, and the program's final estimate of Theta
may, therefore, be biassed upwards (it would very probably have been near zero).

"WARNING, Maximizer failed:  you may wish to try again with a different
random seed."

The part of the program which attempts to find the maximum of the
likelihood curve sometimes fails, producing this message.  The program
will use the values from the previous chain instead of trying to do
anything with the results of the failed maximization.

Occasionally these failures are just random bad luck (in which case
trying again with a different random number seed may help).  More
usually, however, the likelihood surface has a bad shape (more than
one peak, or totally flat).  Multiple peaks are, in our experience,
caused by chains that are too short, so they don't have time to settle
down.  Flat surfaces are usually caused by inadequate amounts of data.

If you have repeated maximizer failures, first try lengthening the
chains; if this doesn't help, you may not have enough data for a good
estimate.  For example, if there are very few variable sites in your
data set, recombinations cannot be detected and the likelihood surface
will be flat in that direction.  The method of Griffiths et al. may
be more useful in cases of very sparse data, though no method can
accurately estimate recombination rate without some polymorphism to work
with.
